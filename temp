def score_csv (score_seq, score_angle, score_long, seq, df):
    score_moy = 0
    score_moy_angle = 0
    score_moy_long = 0
    for i in range(7):
        score_moy+=score_seq[i]
        score_moy_angle += score_angle[i]
        score_moy_long += score_long[i]
    score_moy= score_moy/7
    score_moy_angle /= 7
    score_moy_long/=7
    for i in range(len(df)):
        seq_ref = str (df[df.columns[0]][i]) +","+str(df[df.columns[1]][i]) +","+ str(df[df.columns[2]][i])
        if seq_ref == seq:
            df.loc[df.index[i], 'Score_global'] = str(score_seq)
            df.loc[df.index[i], 'Moy_global'] = str(score_moy) 
            df.loc[df.index[i], 'Score_long'] = str(score_long)
            df.loc[df.index[i], 'Moy_long'] = str(score_moy_long) 
            df.loc[df.index[i], 'Score_angle'] = str(score_angle)
            df.loc[df.index[i], 'Moy_angle'] = str(score_moy_angle) 
    df.to_csv('copy_of_' + 'result.csv')


def seq_score():
    df = pd.read_csv('result.csv', na_filter=False)
    
    df["Score_global"] = ""
    df["Moy_global"] = ""
    df["Score_long"] = ""
    df["Moy_long"] = ""
    df["Score_angle"] = ""
    df["Moy_angle"] = ""
    for i in range(len(df)):
        seq = (df[df.columns[0]][i]) +","+ str(df[df.columns[1]][i]) +","+ str(df[df.columns[2]][i])
        #trouver la liste de score correspondant
        score_seq= [0,1,2,3,4,5,6]
        score_angle = [0,1,2,3,4,5,6]
        score_long = [0,1,2,3,4,5,6]
        score_csv (score_seq, score_angle, score_long, seq, df)

def plot_score_global(): 
    df = pd.read_csv('copy_of_result.csv')
    angle = [0,90, 180]
    y_true_0 = 0
    y_false_0= 0
    y_true_90 = 0
    y_false_90= 0
    y_true_180 = 0
    y_false_180= 0
    mean = mean_square_orientation(df[df.columns[7]])
    for i in range (4): 

        y_true_0 +=mean[i][0][0][0]
        y_false_0 +=mean[i][0][1][0]
        y_true_90 +=mean[i][1][0][0]
        y_false_90 +=mean[i][1][1][0]
        y_true_180 +=mean[i][2][0][0]
        y_false_180 +=mean[i][2][1][0]
    y_true_0 /=4
    y_false_0/=4
    y_true_90 /=4
    y_false_90/=4
    y_true_180 /=4
    y_false_180/=4

    axe_x = np.arange(len(angle))
    plt.bar(axe_x-0.1,[y_true_0,y_true_90,y_true_180 ] , 0.2, label='with memorization')
    plt.bar(axe_x+0.1, [y_false_0,y_false_90,y_false_180 ], 0.2, label='without memorization')
    plt.xticks(axe_x, angle)
    plt.ylim((0,100))
    plt.legend()
    plt.title ("Score global des carrés en fonction de l'orientation de la chaise par pers")
    plt.xlabel("Angles d'orientation de la chaise")
    plt.ylabel("Score global des carrés (sur 100)")
    plt.show()



def plot_score_angle(): 
    df = pd.read_csv('copy_of_result.csv')
    angle = [0,90, 180]
    y_true_0 = 0
    y_false_0= 0
    y_true_90 = 0
    y_false_90= 0
    y_true_180 = 0
    y_false_180= 0
    mean = mean_square_orientation(df[df.columns[11]])
    for i in range (4): 

        y_true_0 +=mean[i][0][0][0]
        y_false_0 +=mean[i][0][1][0]
        y_true_90 +=mean[i][1][0][0]
        y_false_90 +=mean[i][1][1][0]
        y_true_180 +=mean[i][2][0][0]
        y_false_180 +=mean[i][2][1][0]
    y_true_0 /=4
    y_false_0/=4
    y_true_90 /=4
    y_false_90/=4
    y_true_180 /=4
    y_false_180/=4


    axe_x = np.arange(len(angle))
    plt.bar(axe_x-0.1,[y_true_0,y_true_90,y_true_180 ] , 0.2, label='with memorization')
    plt.bar(axe_x+0.1, [y_false_0,y_false_90,y_false_180 ], 0.2, label='without memorization')
    plt.xticks(axe_x, angle)
    plt.ylim((0,100))
    plt.legend()
    plt.title ("Score angulaire des carrés en fonction de l'orientation de la chaise par pers")
    plt.xlabel("Angles d'orientation de la chaise")
    plt.ylabel("Score angulaire des carrés (sur 100)")
    plt.show()

def plot_score_long(): 
    df = pd.read_csv('copy_of_result.csv')
    angle = [0,90, 180]
    y_true_0 = 0
    y_false_0= 0
    y_true_90 = 0
    y_false_90= 0
    y_true_180 = 0
    y_false_180= 0
    mean = mean_square_orientation(df[df.columns[9]])
    for i in range (4): 

        y_true_0 +=mean[i][0][0][0]
        y_false_0 +=mean[i][0][1][0]
        y_true_90 +=mean[i][1][0][0]
        y_false_90 +=mean[i][1][1][0]
        y_true_180 +=mean[i][2][0][0]
        y_false_180 +=mean[i][2][1][0]
    y_true_0 /=4
    y_false_0/=4
    y_true_90 /=4
    y_false_90/=4
    y_true_180 /=4
    y_false_180/=4

    axe_x = np.arange(len(angle))
    plt.bar(axe_x-0.1,[y_true_0,y_true_90,y_true_180 ] , 0.2, label='with memorization')
    plt.bar(axe_x+0.1, [y_false_0,y_false_90,y_false_180 ], 0.2, label='without memorization')
    plt.xticks(axe_x, angle)
    plt.ylim((0,100))
    plt.legend()
    plt.title ("Score des longueurs des carrés en fonction de l'orientation de la chaise par pers")
    plt.xlabel("Angles d'orientation de la chaise")
    plt.ylabel("Score des longeurs des carrés (sur 100)")
    plt.show()
    
def mean_square_orientation():
    df = pd.read_csv("result.csv")
    subject = ['S1', 'S2', 'S3', 'S4']
    angle = ['0','90','180']
    means = [[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]]]
    number_with = 0
    number_without = 0
    subject_data = df['subject']
    for i in range(len(df)):
        for j in subject : 
            if str(subject_data[i])== j or str(subject_data[i])== j +'bis' :
                for k in angle : 
                    if str(df['angle'][i])== k:
                        if str(df['memorization_task'][i])=='True':
                            means[subject.index(j)][angle.index(k)][0]+= int(df['angle'][i])
                            number_with += 1
                        if str(df['memorization_task'][i])=='False':
                            means[subject.index(j)][angle.index(k)][1]+= int(df['angle'][i])
                            number_without += 1
                    else :
                        means[subject.index(j)][angle.index(k)][0] /= number_with 
                        means[subject.index(j)][angle.index(k)][1] /= number_without
                        number_with = 0
                        number_without = 0
    print(means)